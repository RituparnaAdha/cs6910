# -*- coding: utf-8 -*-
"""PartAQ1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/162jpIuZ2tUl90secC5tVPGl6XK19MNJr
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras import models, optimizers, activations
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Dense, Flatten, Activation, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

class CNN(object):
    def __init__():
        return
    def __new__(self, input_shape, no_of_filters, filters, activation_function, pool_size, neurons_in_dense_layer):

        #input layer
        model = models.Sequential()
        model.add(Conv2D(no_of_filters[0], filters[0], input_shape = input_shape))
        model.add(Activation(activation_function))    
        model.add(MaxPooling2D(pool_size))

        #convolutional layers
        _layers = range(1, len(filters))
        for _layer in _layers:
     
            model.add(Conv2D(no_of_filters[_layer], filters[_layer]))
            model.add(Activation(activation_function))
            model.add(MaxPooling2D(pool_size))

        #dense layer
        model.add(Flatten())
        model.add(Dense(neurons_in_dense_layer))
        model.add(Activation(activation_function))
        
        #output layer
        model.add(Dense(10))
        model.add(Activation('softmax'))
        model.summary()
        
        return model

if __name__ == "__main__":
    m = 32 #no. of filter in each layer
    no_of_filters = [5]*5
    k = 3 #layer size  
    filters = [(k, k)] * 5
    activation_function = "relu"
    neurons_in_dense_layer = 32
    
    pool_size = (2, 2)
    input_shape=(500,500,3)
    
    cnn_model = CNN(input_shape, no_of_filters, filters, activation_function, pool_size, neurons_in_dense_layer)